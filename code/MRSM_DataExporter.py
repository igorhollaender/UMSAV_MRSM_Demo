#!/usr/bin/env python
# coding=utf-8
#

#-------------------------------------------------------------------------------
#
#      The Magnetic Resonance Scanner Mockup Project
#
#
#      M  R  S  M  _  D a t a  E x p o r t e r  .  p  y 
#
#
#      Last update: IH241118
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
#  N O T E S :
#
#
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
#  B U G S :
#   IH241118 floats are not stored wiht limited precision (JSON encoder problem)
#
#-------------------------------------------------------------------------------

import json
import os
from decimal import Decimal

from MRSM_Utilities import debug_message, error_message

class JSONDataExporter():

    def __init__(self,exportDirectory='.') -> None:
        self.exportDirectory=exportDirectory
        pass
            
    def export(self,readingsDict: dict, filename: str):
        dirfilename=os.path.join(self.exportDirectory,filename)
        try:
            with open(dirfilename,'w') as file:
                file.write(json.dumps(readingsDict,indent=4,cls=FloatPrecisionEncoder,precision=2))
            debug_message(f"Exported {dirfilename}")
        except FileNotFoundError:
            error_message(f"{dirfilename} not found")
            raise FileNotFoundError(dirfilename)

# IH241118 generated by Copilot
# PROBLEM HERE does not work as expected
class FloatPrecisionEncoder(json.JSONEncoder):
    def __init__(self, *args, **kwargs):
        self.precision = kwargs.pop('precision', None)
        super().__init__(*args, **kwargs)

    def encode(self, o):
        if isinstance(o, float):
            o = round(o, self.precision)
        return super().encode(o)

    def default(self, o):
        if isinstance(o, Decimal):
            return float(o)
        return super().default(o)
